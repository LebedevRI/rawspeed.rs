on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      runs-on:
        required: true
        type: string
      builder-host:
        required: true
        type: string
      builder-target:
        required: true
        type: string
      msys2-msystem:
        required: true
        type: string
      rust-toolchain-version:
        required: true
        type: string
      rust-toolchain-abi:
        required: true
        type: string
      flavor:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:

env:
  RUSTFLAGS: "-Dwarnings"
  SRC_DIR: ${{ github.workspace }}/rawspeed.rs
  RUST_TOOLCHAIN_NAME: ${{ inputs.rust-toolchain-version }}-${{ inputs.rust-toolchain-abi }}
  CODECOV_TOKEN_EXISTS: ${{ secrets.CODECOV_TOKEN != '' }}

jobs:
  windows-msys2:
    runs-on: ${{ inputs.runs-on }}
    name: ${{ inputs.os }}.${{ inputs.msys2-msystem }}, Rust ${{ inputs.rust-toolchain-version }}-${{ inputs.rust-toolchain-abi }}, profile ${{ inputs.flavor }}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Fetch/Checkout RawSpeed.RS git repo
        timeout-minutes: 2
        uses: actions/checkout@v4
        with:
          path: 'rawspeed.rs'
          fetch-depth: 1
      - name: Install Base Dependencies
        timeout-minutes: 3
        uses: msys2/setup-msys2@v2
        with:
          cache: false
          msystem: ${{ inputs.msys2-msystem }}
          update: true
          pacboy: >-
            cc:p
            curl:p
            gnupg:p
      - name: Install Rust
        timeout-minutes: 1
        run: |
          set -xe
          rm -rf $(cygpath $USERPROFILE)/.rustup
          rm -rf $(cygpath $USERPROFILE)/.cargo
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none -y
          export PATH=$PATH:"$(cygpath $USERPROFILE)/.cargo/bin"
          rustup toolchain install ${{ env.RUST_TOOLCHAIN_NAME }} --allow-downgrade --profile minimal
          rustup default ${{ env.RUST_TOOLCHAIN_NAME }}
          rustup component add clippy
      - name: Install necessary packages for code coverage
        if: (github.event_name == 'pull_request' || env.CODECOV_TOKEN_EXISTS == true) && inputs.builder-host == 'x86_64' && inputs.rust-toolchain-abi == 'msvc'
        timeout-minutes: 3
        run: |
          set -xe
          export PATH=$PATH:"$(cygpath $USERPROFILE)/.cargo/bin"
          rustup component add llvm-tools-preview
          cargo install cargo-llvm-cov
      - name: Run cargo check
        timeout-minutes: 1
        run: |
          set -xe
          export PATH=$PATH:"$(cygpath $USERPROFILE)/.cargo/bin"
          cd "$SRC_DIR"
          cargo check --profile ${{ inputs.flavor }} --all-targets --all-features
      - name: Run Clippy
        timeout-minutes: 1
        run: |
          set -xe
          export PATH=$PATH:"$(cygpath $USERPROFILE)/.cargo/bin"
          cd "$SRC_DIR"
          cargo clippy --profile ${{ inputs.flavor }} --all-targets --all-features
      - name: Build
        timeout-minutes: 1
        run: |
          set -xe
          export PATH=$PATH:"$(cygpath $USERPROFILE)/.cargo/bin"
          cd "$SRC_DIR"
          cargo build --profile ${{ inputs.flavor }}
      - name: Run tests
        timeout-minutes: 1
        run: |
          set -xe
          export PATH=$PATH:"$(cygpath $USERPROFILE)/.cargo/bin"
          cd "$SRC_DIR"
          cargo test --profile ${{ inputs.flavor }}
      - name: Run tests to collect code coverage
        timeout-minutes: 1
        if: (github.event_name == 'pull_request' || env.CODECOV_TOKEN_EXISTS == true) && inputs.builder-host == 'x86_64' && inputs.rust-toolchain-abi == 'msvc'
        env:
          RUSTFLAGS: "-C instrument-coverage"
        run: |
          set -xe
          export PATH=$PATH:"$(cygpath $USERPROFILE)/.cargo/bin"
          cd "$SRC_DIR"
          cargo clean
          cargo llvm-cov run --no-report --profile ${{ inputs.flavor }}
          cargo llvm-cov     --no-report --profile ${{ inputs.flavor }}
      - name: Aggregate code coverage
        timeout-minutes: 1
        if: (github.event_name == 'pull_request' || env.CODECOV_TOKEN_EXISTS == true) && inputs.builder-host == 'x86_64' && inputs.rust-toolchain-abi == 'msvc'
        run: |
          set -xe
          export PATH=$PATH:"$(cygpath $USERPROFILE)/.cargo/bin"
          cd "$SRC_DIR"
          cargo llvm-cov report --codecov --output-path $SRC_DIR/codecov.json --profile ${{ inputs.flavor }}
      - name: Upload coverage reports to Codecov
        timeout-minutes: 1
        if: (github.event_name == 'pull_request' || env.CODECOV_TOKEN_EXISTS == true) && inputs.builder-host == 'x86_64' && inputs.rust-toolchain-abi == 'msvc'
        uses: codecov/codecov-action@v5
        env:
          OS: ${{ inputs.os }}
          BUILDER_HOST: ${{ inputs.builder-host }}
          BUILDER_TARGET: ${{ inputs.builder-target }}
          ENDIANNESS: ${{ ((inputs.builder-target == 's390x' || inputs.builder-target == 'powerpc64') && 'big') || 'little' }}
          RUST_TOOLCHAIN: ${{ env.RUST_TOOLCHAIN_NAME }}
          RUST_PROFILE: ${{ inputs.flavor }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,BUILDER_HOST,BUILDER_TARGET,RUST_TOOLCHAIN,,RUST_PROFILE
          flags: ${{ env.OS }}, host=${{ env.BUILDER_HOST }}, target=${{ env.BUILDER_TARGET }}, endianness=${{ env.ENDIANNESS }}, rust=${{ env.RUST_TOOLCHAIN }}, profile=${{ env.RUST_PROFILE }}
          files: ${{ env.SRC_DIR }}/codecov.json
          root_dir: ${{ env.SRC_DIR }}
          fail_ci_if_error: true

