on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      runs-on:
        required: true
        type: string
      builder-host:
        required: true
        type: string
      builder-target:
        required: true
        type: string
      xcode-version:
        required: true
        type: string
      LLVM_VER:
        required: true
        type: string
      rust-toolchain-name:
        required: true
        type: string
      build-profile:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:

env:
  RUSTFLAGS: "-Dwarnings"
  SRC_DIR: ${{ github.workspace }}/rawspeed.rs
  CODECOV_TOKEN_EXISTS: ${{ secrets.CODECOV_TOKEN != '' }}

jobs:
  macOS:
    name: ${{ inputs.runs-on }}, XCode ${{ inputs.xcode-version }}, Rust ${{ inputs.rust-toolchain-name }}, profile ${{ inputs.build-profile }}
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Configure necessary env variables
        timeout-minutes: 1
        run: |
          set -xe
          WITH_CODE_COVERAGE=${{ github.event_name == 'pull_request' || env.CODECOV_TOKEN_EXISTS == 'true' }}
          echo "WITH_CODE_COVERAGE=$(echo ${WITH_CODE_COVERAGE})" >> $GITHUB_ENV
      - name: Fetch/Checkout RawSpeed.RS git repo
        timeout-minutes: 1
        uses: actions/checkout@v4
        with:
          path: 'rawspeed.rs'
          fetch-depth: 1
      - name: Remove unneeded brew formulas/casks
        timeout-minutes: 4
        run: |
          set -xe
          brew update --quiet
          cd "${SRC_DIR}/.github/"
          brew bundle cleanup --quiet --force
          brew autoremove --quiet
          brew cleanup --quiet --prune=all
      - name: Install Rust
        timeout-minutes: 4
        run: |
          set -xe
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none --profile minimal -y
          rustup toolchain install ${{ inputs.rust-toolchain-name }} --allow-downgrade --profile minimal
          rustup default ${{ inputs.rust-toolchain-name }}
          RUST_COMPONENTS="${RUST_COMPONENTS} \
            clippy \
          "
          if [ "${{ env.WITH_CODE_COVERAGE }}" = "true" ]; then
          RUST_COMPONENTS="${RUST_COMPONENTS} \
            llvm-tools-preview \
          "
          RUST_CRATES="${RUST_CRATES} \
            cargo-llvm-cov \
          "
          fi
          if [ "${RUST_COMPONENTS}" != "" ]; then
          rustup component add ${RUST_COMPONENTS}
          fi
          if [ "${RUST_CRATES}" != "" ]; then
          cargo install ${RUST_CRATES}
          fi
      - name: Run cargo check
        timeout-minutes: 1
        run: |
          set -xe
          . "$HOME/.cargo/env"
          cd "$SRC_DIR"
          cargo check --profile ${{ inputs.build-profile }} --all-targets --all-features
      - name: Run Clippy
        timeout-minutes: 1
        run: |
          set -xe
          . "$HOME/.cargo/env"
          cd "$SRC_DIR"
          cargo clippy --profile ${{ inputs.build-profile }} --all-targets --all-features
      - name: Build
        timeout-minutes: 1
        run: |
          set -xe
          . "$HOME/.cargo/env"
          cd "$SRC_DIR"
          cargo build --profile ${{ inputs.build-profile }}
      - name: Run tests
        timeout-minutes: 1
        run: |
          set -xe
          . "$HOME/.cargo/env"
          cd "$SRC_DIR"
          cargo test --profile ${{ inputs.build-profile }}
      - name: Run tests to collect code coverage
        timeout-minutes: 1
        if: env.WITH_CODE_COVERAGE == 'true'
        env:
          RUSTFLAGS: "-C instrument-coverage"
        run: |
          set -xe
          . "$HOME/.cargo/env"
          cd "$SRC_DIR"
          cargo clean
          cargo llvm-cov --no-report --profile ${{ inputs.build-profile }}
      - name: Aggregate code coverage
        timeout-minutes: 1
        if: env.WITH_CODE_COVERAGE == 'true'
        run: |
          set -xe
          . "$HOME/.cargo/env"
          cd "$SRC_DIR"
          cargo llvm-cov report --codecov --output-path $SRC_DIR/codecov.json --profile ${{ inputs.build-profile }}
      - name: Upload coverage reports to Codecov
        timeout-minutes: 1
        if: env.WITH_CODE_COVERAGE == 'true'
        uses: codecov/codecov-action@v5
        env:
          OS: ${{ inputs.os }}
          BUILDER_HOST: ${{ inputs.builder-host }}
          BUILDER_TARGET: ${{ inputs.builder-target }}
          ENDIANNESS: ${{ ((inputs.builder-target == 's390x' || inputs.builder-target == 'powerpc64') && 'big') || 'little' }}
          RUST_TOOLCHAIN: ${{ inputs.rust-toolchain-name }}
          LLVM_VER: ${{ inputs.LLVM_VER }}
          RUST_PROFILE: ${{ inputs.build-profile }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,BUILDER_HOST,BUILDER_TARGET,RUST_TOOLCHAIN,LLVM_VER,RUST_PROFILE
          flags: ${{ env.OS }}, host=${{ env.BUILDER_HOST }}, target=${{ env.BUILDER_TARGET }}, endianness=${{ env.ENDIANNESS }}, rust=${{ env.RUST_TOOLCHAIN }}, LLVM=${{ env.LLVM_VER }}, profile=${{ env.RUST_PROFILE }}
          files: ${{ env.SRC_DIR }}/codecov.json
          root_dir: ${{ env.SRC_DIR }}
          fail_ci_if_error: true
